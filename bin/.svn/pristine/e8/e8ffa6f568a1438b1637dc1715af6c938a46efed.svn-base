 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.occularpharma.core.generaterepot.daoimpl;

import com.occularpharma.core.common.Constants;
import com.occularpharma.core.datamaintanence.model.AckStatusDefine;
import com.occularpharma.core.datamaintanence.model.DataLoads;
import com.occularpharma.core.generaterepot.dao.Generatereportdao;
import com.occularpharma.core.generaterepot.model.YTDtrunoverratiomodel;
import com.occularpharma.core.generaterepot.service.GeneratereportService;
import com.occularpharma.core.maintainparlevels.model.AhfsClassificationLevel3;
import com.occularpharma.core.maintainparlevels.model.PharmaCdmDispenseqty;
import com.occularpharma.core.orderdrugs.service.Orderdrugsservice;
import java.sql.Timestamp;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.YearMonth;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/**
 *
 * @author venkat
 */
@Repository
public class GenereatereportdaoImpl implements Generatereportdao {
    
    final static Logger logger = Logger.getLogger(GenereatereportdaoImpl.class);
    
    @Autowired
    SessionFactory sessionfactory;
    @Autowired
    GeneratereportService ReportService;
    @Autowired
    Orderdrugsservice orderdrugsservice;

    /**
     *
     * @param selectyear
     * @param ahfscdesc
     * @param genname
     * @return volumedata *caling getvolumeVariance() function in
     * pricevariance.jsp page /* Displaying volume variance data in
     * Pricevariance.jsp page
     */
    @Override
    public String getReportvariance(String selectyear, String[] ahfscdesc, String genname) {
        @SuppressWarnings("unchecked")
        String volumedata = "";
        try {
            String Currentyear = ReportService.calculateReportvolumevariance("Currentyear", ahfscdesc, genname);
            String Previousyear = ReportService.calculateReportvolumevariance("Previousyear", ahfscdesc, genname);
            
            String currentyeararray[] = Currentyear.split("\\^");
            String previousyeararray[] = Previousyear.split("\\^");
            String currentyearprice[] = currentyeararray[0].split("@");
            String currentyearvolume[] = currentyeararray[1].split("@");
            String currentyearaverage[] = currentyeararray[2].split("@");
            String currentcdm[] = currentyeararray[3].split("@");
            String curcharge_desc[] = currentyeararray[4].split("@");
            
            String previousyearprice[] = previousyeararray[0].split("@");
            String previousyearvolume[] = previousyeararray[1].split("@");
            String previousyearaverage[] = previousyeararray[2].split("@");
            String prevcharge_desc[] = previousyeararray[3].split("@");
            String previouscdm[] = currentyeararray[3].split("@");
            
            double volumevariancevalue = 0;
            double sumvolumevariancevalue = 0;
            double pricevariancevalue = 0;
            double sumpricevariancevalue = 0;
            double totalvariancevalue = 0;
            double sumtotalvariancevalue = 0;
            String individualsumvolumevariancevalue = "";
            String individualsumpricevariancevalue = "";
            String individualsumtotalvariancevalue = "";
            String cdmsum = "";
            
            String currentyear_price = "";
            String previousyear_price = "";
            String currentyear_volume = "";
            String previousyear_volume = "";
            String currentyear_avg = "";
            String previousyear_avg = "";
            String charge_description = "";
            
            for (int i = 0; i < currentyearprice.length; i++) {
                
                volumevariancevalue = (Double.parseDouble(currentyearvolume[i]) - Double.parseDouble(previousyearvolume[i])) * Double.parseDouble(previousyearaverage[i]);
                pricevariancevalue = (Double.parseDouble(currentyearaverage[i]) - Double.parseDouble(previousyearaverage[i])) * Double.parseDouble(currentyearvolume[i]);
                totalvariancevalue = (Double.parseDouble(currentyearprice[i]) - Double.parseDouble(previousyearprice[i]));
                sumvolumevariancevalue += volumevariancevalue;
                sumpricevariancevalue += pricevariancevalue;
                sumtotalvariancevalue += totalvariancevalue;
                individualsumvolumevariancevalue += volumevariancevalue + "@";
                individualsumpricevariancevalue += pricevariancevalue + "@";
                individualsumtotalvariancevalue += totalvariancevalue + "@";
                currentyear_volume += currentyearvolume[i] + "@";
                previousyear_volume += previousyearvolume[i] + "@";
                currentyear_avg += currentyearaverage[i] + "@";
                previousyear_avg += previousyearaverage[i] + "@";
                currentyear_price += currentyearprice[i] + "@";
                previousyear_price += previousyearprice[i] + "@";
                charge_description += curcharge_desc[i] + "@";
                cdmsum += previouscdm[i] + "@";
                
            }
            volumedata = currentyear_volume + "^" + previousyear_volume + "^" + currentyear_avg + "^" + previousyear_avg + "^" + currentyear_price + "^" + previousyear_price + "^" + sumvolumevariancevalue + " ^ " + sumpricevariancevalue + " ^ " + sumtotalvariancevalue + "^" + cdmsum + "^" + individualsumvolumevariancevalue + "^" + individualsumpricevariancevalue + "^" + individualsumtotalvariancevalue + "^" + charge_description;
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(" Exception in  getReportvariance Method" + e);
        }
        return volumedata;
    }

    /**
     * @param cdmNumber
     * @return cdmlist
     *
     */
    @Override
    public String updatereportCinNumbers(String cdmNumber) {
        String cdmlist = orderdrugsservice.displayNdcdata(cdmNumber);
        return cdmlist;
    }

    /**
     *
     * @return success message
     * @param cdm
     * @param chargedesc
     * @param cin
     * @param ndc
     * @param orderqty
     *
     */
    @Override
    public String insertInprocessdata(String cdm, String ndc, String cin, String chargedesc, String orderqty) {
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());// current timestamp 
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        session.beginTransaction();
        String message = "";
        try {
            // int count = ((Long) session.createQuery("select count(DISTINCT patientAccountnumber) from PatientIcd10Pcscodes where patientAccountnumber IN(select patientAccountnumber from SurgeryHistory where year(caseStartDate)='"+yearvalue+"') and icd10PcsCode1 IN (select icddataid from Icddatainsert where procedureId='"+procedureid+"' and assignvalue='yes')").uniqueResult()).intValue();

            int count = ((Long) session.createQuery("SELECT COUNT(distinct cdm) FROM PurchaseOrdersInprocess WHERE cdm='" + cdm + "' and ndc='" + ndc + "' and cin='" + cin + "' and date(currentDatevalue)=CURDATE()").uniqueResult()).intValue();
            if (count > 0) {
                message = Constants.CIN_NUMBER_VALIDATE_MESSAGE;
            } else {
                Query insertqry = session.createSQLQuery("insert into purchase_orders_inprocess(cdm,ndc,cin,current_datevalue,charge_description,order_quantity,po_submission_status,po_active_flag)values(?,?,?,?,?,?,?,?) ");
                insertqry.setString(0, cdm);
                insertqry.setString(1, ndc);
                insertqry.setString(2, cin);
                insertqry.setString(3, timestamp.toString());
                insertqry.setString(4, chargedesc);
                insertqry.setString(5, orderqty);
                insertqry.setInteger(6, Constants.INACTIVE);
                insertqry.setInteger(7, Constants.ACTIVE);
                insertqry.executeUpdate();
                session.getTransaction().commit();
                session.flush();
                session.clear();
                message = Constants.INSERT_MESSAGE;
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.info(" Exception in  insertInprocessdata Method" + e);
        } finally {
            session.close();
        }
        return message;
    }

    /**
     *
     * @return
     */
    /**
     * **Displaying Inventory Level Status in Report page **
     */
    @Override
    public String inventoryStatus(String genname, String drugclassification, String percentvalue, String maxpercent) {
        
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        String cdmdata = "";
        try {
            
            List<AhfsClassificationLevel3> ahfsClassificationLevel3List = null;
            
            String inventory = "";
            String safestock = "";
            String labledescription = "";
            String cdmdatavalue = "";
            String category = "";
            String maxlevel = "";
            if (genname != "" && drugclassification == "") {
                //ahfsClassificationLevel3List = session.createQuery("select distinct pharma_cdm_inv.cdm,pharma_cdm_inv.inventoryBalance,pharma_cdm_inv.minLevel,pharma_cdm_inv.categoryLevelid,pharma_cdm_inv.maxLevel, from PharmaCdmInventoryParameters as pharma_cdm_inv,NdcDefine as ndcval where pharma_cdm_inv.cdm!='" + Constants.NDC_CDM + "' and ndcval.cdm=pharma_cdm_inv.cdm and ndcval.genericName like '%"+genname+"%'").list();
                ahfsClassificationLevel3List = session.createSQLQuery("select distinct pharma_invpar.cdm,pharma_invpar.inventory_balance,pharma_invpar.min_level,pharma_invpar.category_levelid,pharma_invpar.max_level,IFNULL(ROUND((pharma_invpar.inventory_balance-pharma_invpar.min_level)/pharma_invpar.min_level),0) as inm from pharma_cdm_inventory_parameters as pharma_invpar,ndc_define as ndcval where pharma_invpar.cdm!='" + Constants.NDC_CDM + "' and ndcval.cdm=pharma_invpar.cdm and ndcval.generic_name like '%" + genname + "%' HAVING inm BETWEEN '" + maxpercent + "' AND '" + percentvalue + "'").list();
            } else if (genname == "" && drugclassification != "") {
                //ahfsClassificationLevel3List = session.createQuery("select distinct cdm,inventoryBalance,minLevel,categoryLevelid,maxLevel from PharmaCdmInventoryParameters where cdm!='" + Constants.NDC_CDM + "' and categoryLevelid='"+drugclassification+"'").list();

                ahfsClassificationLevel3List = session.createSQLQuery("select distinct pharma_invpar.cdm,pharma_invpar.inventory_balance,pharma_invpar.min_level,pharma_invpar.category_levelid,pharma_invpar.max_level,IFNULL(ROUND((pharma_invpar.inventory_balance-pharma_invpar.min_level)/pharma_invpar.min_level),0) as inm from pharma_cdm_inventory_parameters as pharma_invpar where pharma_invpar.cdm!='" + Constants.NDC_CDM + "' HAVING inm BETWEEN '" + maxpercent + "' AND '" + percentvalue + "'").list();
            } else if (genname != "" && drugclassification != "") {
                //ahfsClassificationLevel3List = session.createQuery("select distinct pharma_cdm_inv.cdm,pharma_cdm_inv.inventoryBalance,pharma_cdm_inv.minLevel,pharma_cdm_inv.categoryLevelid,pharma_cdm_inv.maxLevel from PharmaCdmInventoryParameters as pharma_cdm_inv,NdcDefine as ndcval where pharma_cdm_inv.cdm!='" + Constants.NDC_CDM + "' and pharma_cdm_inv.categoryLevelid='"+drugclassification+"' and ndcval.cdm=pharma_cdm_inv.cdm and ndcval.genericName like '%"+genname+"%'").list();
                ahfsClassificationLevel3List = session.createSQLQuery("select distinct pharma_invpar.cdm,pharma_invpar.inventory_balance,pharma_invpar.min_level,pharma_invpar.category_levelid,pharma_invpar.max_level,IFNULL(ROUND((pharma_invpar.inventory_balance-pharma_invpar.min_level)/pharma_invpar.min_level),0) as inm from pharma_cdm_inventory_parameters as pharma_invpar,ndc_define as ndcval where pharma_invpar.cdm!='" + Constants.NDC_CDM + "' and ndcval.cdm=pharma_invpar.cdm and ndcval.generic_name like '%" + genname + "%' and pharma_invpar.category_levelid='" + drugclassification + "' HAVING inm BETWEEN '" + maxpercent + "' AND '" + percentvalue + "'").list();
            } else {
                //ahfsClassificationLevel3List = session.createQuery("select distinct cdm,inventoryBalance,minLevel,categoryLevelid,maxLevel from PharmaCdmInventoryParameters where cdm!='" + Constants.NDC_CDM + "'").list(); 
                ahfsClassificationLevel3List = session.createSQLQuery("select distinct pharma_invpar.cdm,pharma_invpar.inventory_balance,pharma_invpar.min_level,pharma_invpar.category_levelid,pharma_invpar.max_level,IFNULL(ROUND((pharma_invpar.inventory_balance-pharma_invpar.min_level)/pharma_invpar.min_level),0) as inm from pharma_cdm_inventory_parameters as pharma_invpar where pharma_invpar.cdm!='" + Constants.NDC_CDM + "' HAVING inm BETWEEN '" + maxpercent + "' AND '" + percentvalue + "'").list();
            }
            if (!ahfsClassificationLevel3List.isEmpty()) {
                Iterator itr = ahfsClassificationLevel3List.iterator();
                
                while (itr.hasNext()) {
                    Object[] obj021 = (Object[]) itr.next();
                    String cdm = obj021[0] + "";
                    cdmdatavalue += cdm + "@";
                    inventory += obj021[1] + "@";
                    safestock += obj021[2] + "@";
                    category += obj021[3] + "@";
                    maxlevel += obj021[4] + "@";
                    
                    Query query = session.createQuery("SELECT pharama_cdm.chargeDescription FROM PharmaCdmmaster as pharama_cdm WHERE  pharama_cdm.cdm='" + cdm + "' AND pharama_cdm.deletionFlag=" + Constants.ACTIVE + "");
                    query.setMaxResults(1);
                    if (!query.list().isEmpty() && query.list().size() > 0) {
                        
                        for (Object list : query.list()) {
                            labledescription += query.list().get(0) + "@";
                            
                        }
                        
                    } else {
                        labledescription += "--" + "@";
                        
                    }
                    
                }
                
            }
            cdmdata = inventory + "^" + safestock + "^" + labledescription + "^" + category + "^" + cdmdatavalue + "^" + maxlevel;
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Exception is in inventoryStatus Method" + e);
        } finally {
            session.close();
        }
        return cdmdata;
        
    }
    
    @Override
    public ArrayList<List> displayDrugutilizationgraph(String startdate, String enddate, String ahfsvalue, String label_genericname, String label_desc) {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<PharmaCdmDispenseqty> pharma_cdmdisp = null;
        ArrayList<List> al = new ArrayList();
        try {
<<<<<<< .mine
            
            String ahfsdescarray[] = ahfsvalue.split(",");
            if (ahfsvalue != "" && label_genericname == "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where  ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "')) AND  date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                    al.add(pharma_cdmdisp);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc == "") {
                
                pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT cdm FROM ndc_define as ndcvalsub where ndcvalsub.generic_name like '%" + label_genericname + "%' ) AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.generic_name like '%" + label_genericname + "%' ) and date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                al.add(pharma_cdmdisp);
                
            } else if (ahfsvalue == "" && label_genericname == "" && label_desc != "") {
                
                pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' ) AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' ) and date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                al.add(pharma_cdmdisp);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.generic_name like '%" + label_genericname + "%')  and  ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "') AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.generic_name like '%" + label_genericname + "%'  and ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "')) AND  date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                    al.add(pharma_cdmdisp);
                }
            } else if (ahfsvalue != "" && label_genericname == "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%')  and  ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "') AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%'  and ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "')) AND  date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                    al.add(pharma_cdmdisp);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc != "") {
                
                pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' and ndcvalsub.generic_name like '%" + label_genericname + "%' ) AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' and ndcvalsub.generic_name like '%" + label_genericname + "%' ) and date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                al.add(pharma_cdmdisp);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' and ndcvalsub.generic_name like '%" + label_genericname + "%')  and  ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "') AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' and ndcvalsub.generic_name like '%" + label_genericname + "%'  and ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "')) AND  date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                    al.add(pharma_cdmdisp);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            session.close();
        }
        return al;
    }
    
    @Override
    public ArrayList<List> getutilizaitonreport(String startdate, String enddate, String ahfsvalue, String label_genericname, String label_desc) {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List utilityqry = null;
        
        ArrayList getutilizationList = new ArrayList();
        try {
            String ahfsdescarray[] = ahfsvalue.split(",");
            if (ahfsvalue != "" && label_genericname == "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    utilityqry = session.createSQLQuery("SELECT pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                    getutilizationList.add(utilityqry);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc == "") {
                
                utilityqry = session.createSQLQuery("SELECT  pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp WHERE  pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.generic_name like '%" + label_genericname + "%') AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                getutilizationList.add(utilityqry);
                
            } else if (ahfsvalue == "" && label_genericname == "" && label_desc != "") {
                
                utilityqry = session.createSQLQuery("SELECT  pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp where pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%') AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                getutilizationList.add(utilityqry);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    utilityqry = session.createSQLQuery("SELECT pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.generic_name like '%" + label_genericname + "%') and  ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                    getutilizationList.add(utilityqry);
                }
            } else if (ahfsvalue != "" && label_genericname == "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    utilityqry = session.createSQLQuery("SELECT pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%') and  ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                    getutilizationList.add(utilityqry);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc != "") {
                
                utilityqry = session.createSQLQuery("SELECT  pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp where pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%' and ndcval.generic_name like '%" + label_genericname + "%') AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                getutilizationList.add(utilityqry);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    utilityqry = session.createSQLQuery("SELECT pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%' and ndcval.generic_name like '%" + label_genericname + "%') and  ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                    getutilizationList.add(utilityqry);
                }
            }
//     utilityqry=session.createSQLQuery("SELECT fin,cdm,charge_description,activity_type,patient_nursing_ambulatory_unit,medical_service,date(service_date),total_charge_amount,charge_qty FROM pharma_cdm_dispenseqty WHERE date(service_date) BETWEEN '"+startdate+"' AND '"+enddate+"' AND update_status=1").list();

||||||| .r321

            pharma_cdmdisp = session.createSQLQuery("SELECT FORMAT((SELECT SUM(total_charge_amount) FROM pharma_cdm_dispenseqty WHERE date(service_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND update_status=1)/SUM(total_charge_amount),2) as sumvalue,medical_service FROM pharma_cdm_dispenseqty WHERE date(service_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND update_status=1 GROUP BY medical_service").list();
=======
            
            String ahfsdescarray[] = ahfsvalue.split(",");
            if (ahfsvalue != "" && label_genericname == "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where  ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "')) AND  date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                    al.add(pharma_cdmdisp);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc == "") {
                
                pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT cdm FROM ndc_define as ndcvalsub where ndcvalsub.generic_name like '%" + label_genericname + "%' ) AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.generic_name like '%" + label_genericname + "%' ) and date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                al.add(pharma_cdmdisp);
                
            } else if (ahfsvalue == "" && label_genericname == "" && label_desc != "") {
                
                pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' ) AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' ) and date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                al.add(pharma_cdmdisp);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.generic_name like '%" + label_genericname + "%')  and  ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "') AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.generic_name like '%" + label_genericname + "%'  and ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "')) AND  date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                    al.add(pharma_cdmdisp);
                }
            } else if (ahfsvalue != "" && label_genericname == "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%')  and  ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "') AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%'  and ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "')) AND  date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                    al.add(pharma_cdmdisp);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc != "") {
                
                pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' and ndcvalsub.generic_name like '%" + label_genericname + "%' ) AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' and ndcvalsub.generic_name like '%" + label_genericname + "%' ) and date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                al.add(pharma_cdmdisp);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    pharma_cdmdisp = session.createSQLQuery("SELECT round(SUM(pharma_cdm.charge_qty)/(SELECT SUM(pharma_cdmsub.charge_qty) FROM pharma_cdm_dispenseqty as pharma_cdmsub WHERE pharma_cdmsub.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' and ndcvalsub.generic_name like '%" + label_genericname + "%')  and  ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "') AND date(pharma_cdmsub.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' AND pharma_cdmsub.update_status='" + Constants.ACTIVE + "'),2) as sumvalue,pharma_cdm.medical_service FROM pharma_cdm_dispenseqty as pharma_cdm WHERE pharma_cdm.cdm IN (SELECT ndcvalsub.cdm FROM ndc_define as ndcvalsub where ndcvalsub.label_desc like '%" + label_desc + "%' and ndcvalsub.generic_name like '%" + label_genericname + "%'  and ndcvalsub.ndc IN(SELECT DISTINCT ndc FROM pharma_price_master WHERE ahfs_number_level3='" + ahfsdescarray[i] + "')) AND  date(pharma_cdm.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_cdm.medical_service ORDER BY sumvalue DESC").list();
                    al.add(pharma_cdmdisp);
                }
            }
>>>>>>> .r399
        } catch (Exception e) {
            e.printStackTrace();
        }
        return getutilizationList;
    }
    
    @Override
    public ArrayList<List> utilizationTrendgraph(String startdate, String enddate, String ahfsvalue, String label_genericname, String label_desc) {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<PharmaCdmDispenseqty> trendgraphlist = null;
        ArrayList<List> utilizationTrendList = new ArrayList();
        try {
            String ahfsdescarray[] = ahfsvalue.split(",");
            if (ahfsvalue != "" && label_genericname == "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                    utilizationTrendList.add(trendgraphlist);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc == "") {
                
                trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.generic_name like '%" + label_genericname + "%') AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                utilizationTrendList.add(trendgraphlist);
                
            } else if (ahfsvalue == "" && label_genericname == "" && label_desc != "") {
                
                trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%') AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                utilizationTrendList.add(trendgraphlist);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.generic_name like '%" + label_genericname + "%') AND ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                    utilizationTrendList.add(trendgraphlist);
                }
            } else if (ahfsvalue != "" && label_genericname == "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%') AND ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                    utilizationTrendList.add(trendgraphlist);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc != "") {
                
                trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%' AND ndcval.generic_name like '%" + label_genericname + "%')  AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                utilizationTrendList.add(trendgraphlist);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%' AND ndcval.generic_name like '%" + label_genericname + "%') AND ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                    utilizationTrendList.add(trendgraphlist);
                }
            }
            //trendgraphlist = session.createSQLQuery("SELECT SUM(total_charge_amount),date(service_date) FROM pharma_cdm_dispenseqty WHERE date(service_date) BETWEEN '"+startdate+"' AND '"+enddate+"' AND update_status=1 GROUP BY service_date").list();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            session.close();
        }
<<<<<<< .mine
        return utilizationTrendList;
||||||| .r321
        return pharma_cdmdisp;
=======
        return al;
>>>>>>> .r399
    }
<<<<<<< .mine
    
    @Override
    public List<AckStatusDefine> getAckvalues() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<AckStatusDefine> ackqrylist = null;
        
        try {
            ackqrylist = session.createQuery("select ackStatuscode from AckStatusDefine").list();
            
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            session.close();
        }
        return ackqrylist;
    }
    
    @Override
    public ArrayList<List> getPurchaseorderdata(String startdate, String enddate, String ahfsvalue, String label_genericname, String acknowledgemtnstatus, String on_contract, String not_on_contract) {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<PharmaCdmDispenseqty> trendgraphlist = null;
        ArrayList<List> utilizationTrendList = new ArrayList();
        String contract_priority = "";
        if (on_contract != "" && not_on_contract == "") {
            contract_priority = "'" + on_contract + "'";
        } else if (on_contract == "" && not_on_contract != "") {
            contract_priority = "'" + not_on_contract + "'";
        } else {
            contract_priority = "'" + not_on_contract + "'" + "," + "'" + on_contract + "'" + "," + "''";
        }
        System.out.println("contract_priority" + contract_priority);
        try {
            String ahfsdescarray[] = ahfsvalue.split(",");
            if (ahfsvalue != "" && label_genericname == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    
                    trendgraphlist = session.createSQLQuery("SELECT pharam_purchaseorder.cin,if(ISNULL(ack_statusdis.ack_status_descriptions),'--',ack_statusdis.ack_status_descriptions),date(pharam_purchaseorder.order_date),if(ISNULL(pharma_inv.order_qty),0,pharma_inv.order_qty),if(ISNULL(pharma_inv.ship_qty),0,pharma_inv.ship_qty),if(ISNULL(pharma_inv.invoice_amount),0,pharma_inv.invoice_amount),if(ISNULL(price_mas.corporate_description),'--',price_mas.corporate_description),if(ISNULL(pharma_inv.return_qty),0,pharma_inv.return_qty),pharam_purchaseorder.ack_status,if(ISNULL(ack_statusdis.ack_status_descriptions) ,0,1) AS pending_ack,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number) as pending_invoice,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number AND pharam_purchaseorder.ack_status!='') as fully_execute FROM   pharma_purchase_order_details as pharam_purchaseorder LEFT JOIN ndc_define as ndcval ON pharam_purchaseorder.NDC=ndcval.ndc  LEFT JOIN pharma_invoice_history as pharma_inv ON pharma_inv.cin=pharam_purchaseorder.cin AND pharma_inv.po_number=pharam_purchaseorder.po_number LEFT JOIN ack_status_define AS ack_statusdis ON ack_statusdis.ack_statuscode=pharam_purchaseorder.ack_status LEFT JOIN pharma_price_master as price_mas ON price_mas.ndc=ndcval.ndc AND price_mas.ahfs_number_level3='" + ahfsdescarray[i] + "' LEFT JOIN contractpriority as contract_prior ON contract_prior.contract_name=price_mas.contract_group_name AND contract_prior.contract_priority IN (" + contract_priority + ") where pharam_purchaseorder.ack_status IN (" + acknowledgemtnstatus + ") AND date(pharam_purchaseorder.ack_date) BETWEEN '" + startdate + "' AND '" + enddate + "'").list();
                    utilizationTrendList.add(trendgraphlist);
                }
            } else if (ahfsvalue == "" && label_genericname != "") {
                
                trendgraphlist = session.createSQLQuery("SELECT pharam_purchaseorder.cin,if(ISNULL(ack_statusdis.ack_status_descriptions),'--',ack_statusdis.ack_status_descriptions),date(pharam_purchaseorder.order_date),if(ISNULL(pharma_inv.order_qty),0,pharma_inv.order_qty),if(ISNULL(pharma_inv.ship_qty),0,pharma_inv.ship_qty),if(ISNULL(pharma_inv.invoice_amount),0,pharma_inv.invoice_amount),if(ISNULL(price_mas.corporate_description),'--',price_mas.corporate_description),if(ISNULL(pharma_inv.return_qty),0,pharma_inv.return_qty),pharam_purchaseorder.ack_status,if(ISNULL(ack_statusdis.ack_status_descriptions) ,0,1) AS pending_ack,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number) as pending_invoice,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number AND pharam_purchaseorder.ack_status!='') as fully_execute FROM   pharma_purchase_order_details as pharam_purchaseorder LEFT JOIN ndc_define as ndcval ON ndcval.generic_name LIKE '%" + label_genericname + "%'  AND pharam_purchaseorder.NDC=ndcval.ndc   LEFT JOIN pharma_invoice_history as pharma_inv ON pharma_inv.cin=pharam_purchaseorder.cin AND pharma_inv.po_number=pharam_purchaseorder.po_number LEFT JOIN ack_status_define AS ack_statusdis ON ack_statusdis.ack_statuscode=pharam_purchaseorder.ack_status LEFT JOIN pharma_price_master as price_mas ON price_mas.ndc=ndcval.ndc LEFT JOIN contractpriority as contract_prior ON contract_prior.contract_name=price_mas.contract_group_name AND contract_prior.contract_priority IN (" + contract_priority + ") where pharam_purchaseorder.ack_status IN (" + acknowledgemtnstatus + ") AND date(pharam_purchaseorder.ack_date) BETWEEN '" + startdate + "' AND '" + enddate + "'").list();
                utilizationTrendList.add(trendgraphlist);
                
            } else if (ahfsvalue != "" && label_genericname != "") {
                
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    
                    trendgraphlist = session.createSQLQuery("SELECT pharam_purchaseorder.cin,if(ISNULL(ack_statusdis.ack_status_descriptions),'--',ack_statusdis.ack_status_descriptions),date(pharam_purchaseorder.order_date),if(ISNULL(pharma_inv.order_qty),0,pharma_inv.order_qty),if(ISNULL(pharma_inv.ship_qty),0,pharma_inv.ship_qty),if(ISNULL(pharma_inv.invoice_amount),0,pharma_inv.invoice_amount),if(ISNULL(price_mas.corporate_description),'--',price_mas.corporate_description),if(ISNULL(pharma_inv.return_qty),0,pharma_inv.return_qty),pharam_purchaseorder.ack_status,if(ISNULL(ack_statusdis.ack_status_descriptions) ,0,1) AS pending_ack,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number) as pending_invoice,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number AND pharam_purchaseorder.ack_status!='') as fully_execute FROM   pharma_purchase_order_details as pharam_purchaseorder LEFT JOIN ndc_define as ndcval ON ndcval.generic_name LIKE '%" + label_genericname + "%'  AND pharam_purchaseorder.NDC=ndcval.ndc   LEFT JOIN pharma_invoice_history as pharma_inv ON pharma_inv.cin=pharam_purchaseorder.cin AND pharma_inv.po_number=pharam_purchaseorder.po_number LEFT JOIN ack_status_define AS ack_statusdis ON ack_statusdis.ack_statuscode=pharam_purchaseorder.ack_status LEFT JOIN pharma_price_master as price_mas ON price_mas.ndc=ndcval.ndc AND price_mas.ahfs_number_level3='" + ahfsdescarray[i] + "' LEFT JOIN contractpriority as contract_prior ON contract_prior.contract_name=price_mas.contract_group_name AND contract_prior.contract_priority IN (" + contract_priority + ") where pharam_purchaseorder.ack_status IN (" + acknowledgemtnstatus + ") AND date(pharam_purchaseorder.ack_date) BETWEEN '" + startdate + "' AND '" + enddate + "'").list();
                    utilizationTrendList.add(trendgraphlist);
                }
                
            }
            //trendgraphlist = session.createSQLQuery("SELECT SUM(total_charge_amount),date(service_date) FROM pharma_cdm_dispenseqty WHERE date(service_date) BETWEEN '"+startdate+"' AND '"+enddate+"' AND update_status=1 GROUP BY service_date").list();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            session.close();
        }
        return utilizationTrendList;
    }
    
    @Override
    public List<DataLoads> getDataloadstatusdata() {
        
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<DataLoads> dataloadlist = null;
        ArrayList al = new ArrayList();
        try {
            dataloadlist = session.createSQLQuery("SELECT date(load_date),program_name,file_name,processed_rows_count,sucess_rows_count,error_rows_count,error_log_list from data_loads where load_date >= now()-interval 3 DAY").list();
            al.add(dataloadlist);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return al;
    }
    
    @Override
    public List searchUploadstatus(String startdate, String enddate) {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<DataLoads> dataloadlist = null;
        ArrayList al = new ArrayList();
        try {
            dataloadlist = session.createSQLQuery("SELECT date(load_date),program_name,file_name,processed_rows_count,sucess_rows_count,error_rows_count,error_log_list from data_loads where date(load_date) between '" + startdate + "' and '" + enddate + "' order by load_date desc").list();
            al.add(dataloadlist);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return al;
    }
    
    @Override
    public ArrayList<List> getPendingOrderstatus() {
        
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<DataLoads> pendingorderlist = null;
        ArrayList al = new ArrayList();
        try {
            pendingorderlist = session.createSQLQuery("select * from ").list();
            al.add(pendingorderlist);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return al;
    }
    
    @Override
    public String getordervolumeVariance() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<DataLoads> ordervary = null;
        ArrayList al = new ArrayList();
        String result = null;
        try {
            
            ordervary = session.createSQLQuery("SELECT on_contract,not_on_contract FROM contactcompliance").list();
            ListIterator itr = ordervary.listIterator();
            while (itr.hasNext()) {
                Object[] contract = (Object[]) itr.next();
                result = contract[0].toString() + "^" + contract[1].toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return result;
    }
    
    @Override
    public List getoneWeeksubstitutions() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List substitutionsquerylist = null;
        ArrayList sublist = new ArrayList();
        try {
            substitutionsquerylist = session.createSQLQuery("SELECT purchase_details.order_cin,purchase_details.ack_cin,purchase_details.order_quantity,purchase_details.ack_qty,ackstat.ack_status_descriptions,ppm.corporate_description FROM pharma_purchase_order_details as purchase_details,ack_status_define as ackstat,pharma_price_master as ppm WHERE purchase_details.NDC=ppm.ndc and purchase_details.ack_status=ackstat.ack_statuscode and purchase_details.order_date >=now()-interval 7 DAY").list();
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return substitutionsquerylist;
    }
    
    @Override
    public String getInventoryvalues() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        DecimalFormat df = new DecimalFormat("0.00");
        List querylist = null;
        List querylist1 = null;
        List querylist2 = null;
        String invetoryvalues = "";
        String cdmval = "";
        
        String purchase_cost = "";
        String dispense_cost = "";
        
        double beginninginventory = 0;
        String endinginventory = "";
        double cogs = 0;
       try{
           
            querylist = session.createSQLQuery("SELECT sum(inventory_balance),sum(inventory_balance*weighted_avg_cost) FROM pharma_cdm_inventory_parameters as inv_param").list();
            ListIterator itr = querylist.listIterator();
            while (itr.hasNext()) {
                Object[] contract = (Object[]) itr.next();
                
                endinginventory = contract[1] + "";
            }
                purchase_cost = "0";//conerted qty
                querylist1 = session.createSQLQuery("SELECT sum(purchase_cost) FROM pharma_invoice_history WHERE date(invoice_date) BETWEEN DATE_FORMAT(now(),'%Y-01-01') AND CURDATE()").list();
                if (!querylist1.isEmpty() && querylist1.size() > 0) {
                    for (Object object : querylist1) {
                        purchase_cost = querylist1.get(0) + "";
                    }
                }
                
                dispense_cost = "0";// charge qty
                querylist2 = session.createSQLQuery("SELECT sum(dispense_cost) FROM pharma_cdm_dispenseqty WHERE  date(activity_date) BETWEEN DATE_FORMAT(now(),'%Y-01-01') AND CURDATE()").list();
                if (!querylist2.isEmpty() && querylist2.size() > 0) {
                    for (Object object : querylist2) {
                        dispense_cost = querylist2.get(0) + "";
                    }
                }
                String nullvaluecontent = "null";
                
                if (endinginventory == "" || endinginventory.length() <= 0 || endinginventory == null || endinginventory.equalsIgnoreCase(nullvaluecontent)) {
                    endinginventory = "0";
                }
                if (dispense_cost == "" || dispense_cost.length() <= 0 || dispense_cost == null || dispense_cost.equalsIgnoreCase(nullvaluecontent)) {
                    dispense_cost = "0";
                }
                if (purchase_cost == "" || purchase_cost.length() <= 0 || purchase_cost == null || purchase_cost.equalsIgnoreCase(nullvaluecontent)) {
                    purchase_cost = "0";
                }
                
               beginninginventory = Double.parseDouble(endinginventory) - Double.parseDouble(purchase_cost) + Double.parseDouble(dispense_cost);
               cogs = Double.parseDouble(dispense_cost);
          
            
//             System.out.println("beginninginventory"+beginninginventory);
//               System.out.println("endinginventory"+endinginventory);
//               System.out.println("cogs"+cogs);
            double averagecost = Double.parseDouble(df.format((beginninginventory + Double.parseDouble(endinginventory)) / 2));
||||||| .r321
=======
    
    @Override
    public ArrayList<List> getutilizaitonreport(String startdate, String enddate, String ahfsvalue, String label_genericname, String label_desc) {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List utilityqry = null;
        
        ArrayList getutilizationList = new ArrayList();
        try {
            String ahfsdescarray[] = ahfsvalue.split(",");
            if (ahfsvalue != "" && label_genericname == "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    utilityqry = session.createSQLQuery("SELECT pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                    getutilizationList.add(utilityqry);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc == "") {
                
                utilityqry = session.createSQLQuery("SELECT  pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp WHERE  pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.generic_name like '%" + label_genericname + "%') AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                getutilizationList.add(utilityqry);
                
            } else if (ahfsvalue == "" && label_genericname == "" && label_desc != "") {
                
                utilityqry = session.createSQLQuery("SELECT  pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp where pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%') AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                getutilizationList.add(utilityqry);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    utilityqry = session.createSQLQuery("SELECT pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.generic_name like '%" + label_genericname + "%') and  ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                    getutilizationList.add(utilityqry);
                }
            } else if (ahfsvalue != "" && label_genericname == "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    utilityqry = session.createSQLQuery("SELECT pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%') and  ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                    getutilizationList.add(utilityqry);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc != "") {
                
                utilityqry = session.createSQLQuery("SELECT  pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp where pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%' and ndcval.generic_name like '%" + label_genericname + "%') AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                getutilizationList.add(utilityqry);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    utilityqry = session.createSQLQuery("SELECT pharma_disp.cdm, pharma_disp.fin,pharma_disp.charge_description,pharma_disp.activity_type,pharma_disp.patient_nursing_ambulatory_unit,pharma_disp.medical_service,date(pharma_disp.activity_date),pharma_disp.total_charge_amount,pharma_disp.charge_qty FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%' and ndcval.generic_name like '%" + label_genericname + "%') and  ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "' ").list();
                    getutilizationList.add(utilityqry);
                }
            }
//     utilityqry=session.createSQLQuery("SELECT fin,cdm,charge_description,activity_type,patient_nursing_ambulatory_unit,medical_service,date(service_date),total_charge_amount,charge_qty FROM pharma_cdm_dispenseqty WHERE date(service_date) BETWEEN '"+startdate+"' AND '"+enddate+"' AND update_status=1").list();
>>>>>>> .r399

<<<<<<< .mine
            System.out.println("averagecost"+averagecost);
            double invetory_turnovervalue = Double.parseDouble(df.format(cogs / averagecost));
            
            invetoryvalues = endinginventory + "@" + df.format(invetory_turnovervalue);
                        System.out.println("invetoryvalues"+invetoryvalues);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return invetoryvalues;
    }
    
    
||||||| .r321
=======
        } catch (Exception e) {
            e.printStackTrace();
        }
        return getutilizationList;
    }
    
>>>>>>> .r399
    @Override
<<<<<<< .mine
    public List getYTDinventoryturnoverratio() {
        @SuppressWarnings("unchecked")
||||||| .r321
    public List getutilizaitonreport(String startdate, String enddate, String ahfsvalue, String label_genericname, String label_desc, String cinNumber) {
 @SuppressWarnings("unchecked")
=======
    public ArrayList<List> utilizationTrendgraph(String startdate, String enddate, String ahfsvalue, String label_genericname, String label_desc) {
        @SuppressWarnings("unchecked")
>>>>>>> .r399
        Session session = sessionfactory.openSession();
<<<<<<< .mine
        DecimalFormat df = new DecimalFormat("0.00");
        List querylist = null;
        List querylist1 = null;
        List querylist2 = null;
||||||| .r321
 List utilityqry=null;
        ArrayList<String> al=new ArrayList<>();
=======
        List<PharmaCdmDispenseqty> trendgraphlist = null;
        ArrayList<List> utilizationTrendList = new ArrayList();
        try {
            String ahfsdescarray[] = ahfsvalue.split(",");
            if (ahfsvalue != "" && label_genericname == "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                    utilizationTrendList.add(trendgraphlist);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc == "") {
                
                trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.generic_name like '%" + label_genericname + "%') AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                utilizationTrendList.add(trendgraphlist);
                
            } else if (ahfsvalue == "" && label_genericname == "" && label_desc != "") {
                
                trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%') AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                utilizationTrendList.add(trendgraphlist);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.generic_name like '%" + label_genericname + "%') AND ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                    utilizationTrendList.add(trendgraphlist);
                }
            } else if (ahfsvalue != "" && label_genericname == "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%') AND ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                    utilizationTrendList.add(trendgraphlist);
                }
            } else if (ahfsvalue == "" && label_genericname != "" && label_desc != "") {
                
                trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%' AND ndcval.generic_name like '%" + label_genericname + "%')  AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                utilizationTrendList.add(trendgraphlist);
                
            } else if (ahfsvalue != "" && label_genericname != "" && label_desc != "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    trendgraphlist = session.createSQLQuery("SELECT SUM(pharma_disp.charge_qty),date(pharma_disp.activity_date) FROM pharma_cdm_dispenseqty as pharma_disp WHERE pharma_disp.cdm IN (SELECT DISTINCT cdm FROM ndc_define as ndcval WHERE ndcval.label_desc like '%" + label_desc + "%' AND ndcval.generic_name like '%" + label_genericname + "%') AND ndcval.ndc IN (SELECT DISTINCT ndc FROM pharma_price_master as pricemas WHERE pricemas.ahfs_number_level3='" + ahfsdescarray[i] + "')) AND date(pharma_disp.activity_date) BETWEEN '" + startdate + "' AND '" + enddate + "'  GROUP BY pharma_disp.activity_date").list();
                    utilizationTrendList.add(trendgraphlist);
                }
            }
            //trendgraphlist = session.createSQLQuery("SELECT SUM(total_charge_amount),date(service_date) FROM pharma_cdm_dispenseqty WHERE date(service_date) BETWEEN '"+startdate+"' AND '"+enddate+"' AND update_status=1 GROUP BY service_date").list();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            session.close();
        }
        return utilizationTrendList;
    }
    
    @Override
    public List<AckStatusDefine> getAckvalues() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<AckStatusDefine> ackqrylist = null;
>>>>>>> .r399
        
<<<<<<< .mine
        String cdmval = "";       
        String inventorybal = "";        
        String purchase_cost="";
        String dispense_cost="";
        double beginninginventory = 0;
        double endinginventory = 0;
        double cogs = 0;
        double averagecost=0;
        double invetory_turnovervalue=0;
        String ahfsdesc = "";
        ArrayList<YTDtrunoverratiomodel> ytdarraylist = new ArrayList<YTDtrunoverratiomodel>();
        try {
            querylist = session.createSQLQuery("SELECT cdm,sum(inventory_balance*weighted_avg_cost) as sumval FROM pharma_cdm_inventory_parameters as inv_param group by cdm order by sumval desc").list();
            ListIterator itr = querylist.listIterator();
            while (itr.hasNext()) {
                beginninginventory=0;
                endinginventory=0;
                cogs=0;
                averagecost=0;
                inventorybal="0";
                invetory_turnovervalue=0;
                Object[] contract = (Object[]) itr.next();
                cdmval = contract[0] + "";
                inventorybal = contract[1] + "";
                
                purchase_cost = "0";
                ahfsdesc="--";
                querylist1 = session.createSQLQuery("SELECT COALESCE(SUM(purchase_cost),0),COALESCE(ahfs_level3.ahfs_description_level3,'--')  FROM pharma_invoice_history as inv_his LEFT JOIN pharma_price_master as pharama_price ON  pharama_price.corporate_item_number=inv_his.cin  LEFT JOIN ahfs_classification_level3 as ahfs_level3 ON ahfs_level3.ahfs_number_level3=pharama_price.ahfs_number_level3 WHERE inv_his.cdm='"+cdmval+"' AND date(inv_his.invoice_date) BETWEEN DATE_FORMAT(now(),'%Y-01-01') AND CURDATE()").list();
                if (!querylist1.isEmpty() && querylist1.size() > 0) {
                    for (Iterator it = querylist1.iterator(); it.hasNext();) {
                        Object[] getahfsc = (Object[]) it.next();
                        purchase_cost = getahfsc[0] + "";
                        ahfsdesc = getahfsc[1] + "";
                    }
                    
                }
                
                dispense_cost = "0";
                querylist2 = session.createSQLQuery("SELECT COALESCE(SUM(dispense_cost),0) FROM pharma_cdm_dispenseqty WHERE cdm='" + cdmval + "' AND date(activity_date) BETWEEN DATE_FORMAT(now(),'%Y-01-01') AND CURDATE()").list();
                if (!querylist2.isEmpty() && querylist2.size() > 0) {
                    for (Object object : querylist2) {
                        dispense_cost = querylist2.get(0) + "";
                    }
                }
                String nullvaluecontent = "null";
                
                
                if (inventorybal == "" || inventorybal.length() <= 0 || inventorybal == null || inventorybal.equalsIgnoreCase(nullvaluecontent)) {
                    inventorybal = "0";
                }
                if (dispense_cost == "" || dispense_cost.length() <= 0 || dispense_cost == null || dispense_cost.equalsIgnoreCase(nullvaluecontent)) {
                    dispense_cost = "0";
                }
                if (purchase_cost == "" || purchase_cost.length() <= 0 || purchase_cost == null || purchase_cost.equalsIgnoreCase(nullvaluecontent)) {
                    purchase_cost = "0";
                }
              

                beginninginventory = Double.parseDouble(inventorybal) - Double.parseDouble(purchase_cost) +Double.parseDouble(dispense_cost);

                endinginventory = Double.parseDouble(inventorybal);

               
                cogs = Double.parseDouble(dispense_cost);
                

                 averagecost = Double.parseDouble(df.format((beginninginventory + endinginventory) / 2));

                if(averagecost>0){
                 invetory_turnovervalue = Double.parseDouble(df.format(cogs / averagecost));
                }else{
                    invetory_turnovervalue = 0;
                }
                System.out.println("invetory_turnovervalue"+invetory_turnovervalue+"cdmval"+cdmval);
                if (invetory_turnovervalue > 0) {
                    String invratio=df.format(invetory_turnovervalue);

                    
                    ytdarraylist.add(new YTDtrunoverratiomodel(ahfsdesc, Double.parseDouble(invratio)));
                    
                   
                }
                
                
            }
          
 Collections.sort(ytdarraylist,YTDtrunoverratiomodel.ahfscompare);

        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return ytdarraylist;
||||||| .r321
 
 try{
     utilityqry=session.createSQLQuery("SELECT fin,cdm,charge_description,activity_type,patient_nursing_ambulatory_unit,medical_service,date(service_date),total_charge_amount,charge_qty FROM pharma_cdm_dispenseqty WHERE date(service_date) BETWEEN '"+startdate+"' AND '"+enddate+"' AND update_status=1").list();
         
 }catch(Exception e){
     e.printStackTrace();
 }
        return utilityqry;
=======
        try {
            ackqrylist = session.createQuery("select ackStatuscode from AckStatusDefine").list();
            
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            session.close();
        }
        return ackqrylist;
>>>>>>> .r399
    }
<<<<<<< .mine
    
    @Override
    public List getTopfiveinventoryvalue() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        DecimalFormat df = new DecimalFormat("0.00");
        List querylist = null;
        List querylist1 = null;
       
        String cdmval = "";
       
        String inventory_bal = "";
        String weighted_avg = "";        
        double endinginventory = 0;
      
        String ahfsdesc = "";
        ArrayList<YTDtrunoverratiomodel> ytdarraylist = new ArrayList<YTDtrunoverratiomodel>();
        try {
            querylist = session.createSQLQuery("SELECT cdm,inventory_balance,weighted_avg_cost FROM pharma_cdm_inventory_parameters as inv_param").list();
            ListIterator itr = querylist.listIterator();
            while (itr.hasNext()) {
                
                endinginventory=0;
               
                Object[] contract = (Object[]) itr.next();
                cdmval = contract[0] + "";
               
                inventory_bal = contract[1] + "";
                weighted_avg = contract[2] + "";
               
                querylist1 = session.createSQLQuery("SELECT DISTINCT ndcval.generic_name FROM pharma_invoice_history as inv_his ,ndc_define as ndcval WHERE  ndcval.cdm=inv_his.cdm AND inv_his.cdm='" + cdmval + "' AND date(inv_his.invoice_date) BETWEEN DATE_FORMAT(now(),'%Y-01-01') AND CURDATE()").list();
                if (!querylist1.isEmpty() && querylist1.size() > 0) {
                     for (Object object : querylist1) {
                        ahfsdesc = querylist1.get(0) + "";
                    }
                    
                }
                
              
                String nullvaluecontent = "null";
               
                if (inventory_bal == "" || inventory_bal.length() <= 0 || inventory_bal == null || inventory_bal.equalsIgnoreCase(nullvaluecontent)) {
                    inventory_bal = "0";
                }
                if (weighted_avg == "" || weighted_avg.length() <= 0 || weighted_avg == null || weighted_avg.equalsIgnoreCase(nullvaluecontent)) {
                    weighted_avg = "0";
                }
              endinginventory = Double.parseDouble(df.format(Double.parseDouble(inventory_bal) * Double.parseDouble(weighted_avg)));
                
               
                if (endinginventory > 0) {
                    String inventoryvalue=df.format(endinginventory);
                    ytdarraylist.add(new YTDtrunoverratiomodel(ahfsdesc, Double.parseDouble(inventoryvalue)));
                    
                }
                
                
            }
            Collections.sort(ytdarraylist, YTDtrunoverratiomodel.ahfscompare);
                 
            System.out.println("ytdarraylist"+ytdarraylist.size());

||||||| .r321

=======
    
>>>>>>> .r399
//                   
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return ytdarraylist;
    }
    
    @Override
<<<<<<< .mine
    public String getMonthlyinventoryturnoverratio() {
        @SuppressWarnings("unchecked")
||||||| .r321
    public List<PharmaCdmDispenseqty> utilizationTrendgraph(String startdate, String enddate, String ahfsvalue, String label_genericname, String label_desc, String cinNumber) {
       @SuppressWarnings("unchecked")
=======
    public ArrayList<List> getPurchaseorderdata(String startdate, String enddate, String ahfsvalue, String label_genericname, String acknowledgemtnstatus, String on_contract, String not_on_contract) {
        @SuppressWarnings("unchecked")
>>>>>>> .r399
        Session session = sessionfactory.openSession();
        DecimalFormat df = new DecimalFormat("0.00");
        List querylist = null;
        List querylist1 = null;
        List querylist2 = null;
        String invetoryvalues = "";
        
        String start_purchase_cost = "";
        String end_purchase_cost="";
        String start_dispense_cost="";
        String end_dispense_cost="";
        
        String month_dispense_cost="";
        
        double beginninginventory = 0;
        String endinginventory = "";
        
        double averagecost =0;
        double endinginventoryvalue =0;
        double invetory_turnovervalue =0;
        
        String ahfsdesc = "";
        ArrayList<YTDtrunoverratiomodel> ytdarraylist = new ArrayList<YTDtrunoverratiomodel>();
//        String[] monthsdata  ={"Jan"};
        String[] monthsdata  ={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
        String startdatedata="";
        String enddatedata="";
        String monthedata="";
        ArrayList<List> utilizationTrendList = new ArrayList();
        String contract_priority = "";
        if (on_contract != "" && not_on_contract == "") {
            contract_priority = "'" + on_contract + "'";
        } else if (on_contract == "" && not_on_contract != "") {
            contract_priority = "'" + not_on_contract + "'";
        } else {
            contract_priority = "'" + not_on_contract + "'" + "," + "'" + on_contract + "'" + "," + "''";
        }
        System.out.println("contract_priority" + contract_priority);
        try {
<<<<<<< .mine
            Calendar c= Calendar.getInstance();
int year = c.get(Calendar.YEAR);//calender year starts from 1900 so you must add 1900 to the value recevie.i.e., 1990+112 = 2012
int month = c.get(Calendar.MONTH);//this is april so you will receive  3 instead of 4.
    querylist = session.createSQLQuery("SELECT sum(inventory_balance),sum(inventory_balance*weighted_avg_cost) FROM pharma_cdm_inventory_parameters as inv_param").list();
            ListIterator itr = querylist.listIterator();
            while (itr.hasNext()) {
                Object[] contract = (Object[]) itr.next();
                
                endinginventory = contract[1] + "";
            }
            for(int i=0;i<monthsdata.length;i++){
                beginninginventory = 0;
                endinginventoryvalue = 0;                
                averagecost =0;
                invetory_turnovervalue =0;
                if((i+1)<=month){
                
                if(monthsdata[i]=="Jan"){
                    startdatedata=year+"-01-01";
                    enddatedata=year+"-01-31";
                    monthedata=year+"-01";
                }else if(monthsdata[i]=="Feb"){
                    startdatedata=year+"-02-01";
                    enddatedata=year+"-03-01";
                    monthedata=year+"-02";
                }else  if(monthsdata[i]=="Mar"){
                    startdatedata=year+"-03-01";
                    enddatedata=year+"-04-01";
                    monthedata=year+"-03";
                }else  if(monthsdata[i]=="Apr"){
                    startdatedata=year+"-04-01";
                    enddatedata=year+"-05-01";
                    monthedata=year+"-04";
                }else if(monthsdata[i]=="Mar"){
                    startdatedata=year+"-05-01";
                    enddatedata=year+"-06-01";
                    monthedata=year+"-05";
                }else if(monthsdata[i]=="Jun"){
                    startdatedata=year+"-06-01";
                    enddatedata=year+"-07-01";
                    monthedata=year+"-06";
                }else if(monthsdata[i]=="Jul"){
                    startdatedata=year+"-07-01";
                    enddatedata=year+"-08-01";
                    monthedata=year+"-07";
                }else if(monthsdata[i]=="Aug"){
                    startdatedata=year+"-08-01";
                    enddatedata=year+"-09-01";
                    monthedata=year+"-08";
                }else if(monthsdata[i]=="Sep"){
                    startdatedata=year+"-09-01";
                    enddatedata=year+"-10-01";
                    monthedata=year+"-09";
                }else if(monthsdata[i]=="Oct"){
                    startdatedata=year+"-10-01";
                    enddatedata=year+"-11-01";
                    monthedata=year+"-10";
                }else if(monthsdata[i]=="Nov"){
                    startdatedata=year+"-11-01";
                    enddatedata=year+"-12-01";
                    monthedata=year+"-11";
                }else if(monthsdata[i]=="Dec"){
                    startdatedata=year+"-12-01";
                    enddatedata=year+"-12-31";
                    monthedata=year+"-12";
                }
       
            
            /***  month data ***/
               
                
                month_dispense_cost = "0";
                querylist2 = session.createSQLQuery("SELECT sum(dispense_cost) FROM pharma_cdm_dispenseqty WHERE DATE_FORMAT(activity_date,'%Y-%m')='"+monthedata+"'").list();
                if (!querylist2.isEmpty() && querylist2.size() > 0) {
                    for (Object object : querylist2) {
                        month_dispense_cost = querylist2.get(0) + "";
                    }
                }
                
                /*** starting blance ***/
                start_purchase_cost = "0";//coverted qty
                querylist1 = session.createSQLQuery("SELECT sum(purchase_cost) FROM pharma_invoice_history WHERE date(invoice_date) BETWEEN '"+startdatedata+"' AND CURDATE()").list();
                if (!querylist1.isEmpty() && querylist1.size() > 0) {
                    for (Object object : querylist1) {
                        start_purchase_cost = querylist1.get(0) + "";
                    }
                }
                
                start_dispense_cost = "0";
                querylist2 = session.createSQLQuery("SELECT sum(dispense_cost) FROM pharma_cdm_dispenseqty WHERE date(activity_date) BETWEEN '"+startdatedata+"' AND CURDATE()").list();
                if (!querylist2.isEmpty() && querylist2.size() > 0) {
                    for (Object object : querylist2) {
                        start_dispense_cost = querylist2.get(0) + "";
                    }
                }
                
                /** Ending inventory value **/
                end_purchase_cost = "0";
                querylist1 = session.createSQLQuery("SELECT sum(purchase_cost) FROM pharma_invoice_history WHERE date(invoice_date) BETWEEN '"+enddatedata+"' AND CURDATE()").list();
                if (!querylist1.isEmpty() && querylist1.size() > 0) {
                    for (Object object : querylist1) {
                        end_purchase_cost = querylist1.get(0) + "";
                    }
                }
                
                end_dispense_cost = "0";
                querylist2 = session.createSQLQuery("SELECT sum(dispense_cost) FROM pharma_cdm_dispenseqty WHERE date(activity_date) BETWEEN '"+enddatedata+"' AND CURDATE()").list();
                if (!querylist2.isEmpty() && querylist2.size() > 0) {
                    for (Object object : querylist2) {
                        end_dispense_cost = querylist2.get(0) + "";
                    }
                }
                String nullvaluecontent = "null";
                
                if (month_dispense_cost == "" || month_dispense_cost.length() <= 0 || month_dispense_cost == null || month_dispense_cost.equalsIgnoreCase(nullvaluecontent)) {
                    month_dispense_cost = "0";
                }
                if (start_purchase_cost == "" || start_purchase_cost.length() <= 0 || start_purchase_cost == null || start_purchase_cost.equalsIgnoreCase(nullvaluecontent)) {
                    start_purchase_cost = "0";
                }
                if (start_dispense_cost == "" || start_dispense_cost.length() <= 0 || start_dispense_cost == null || start_dispense_cost.equalsIgnoreCase(nullvaluecontent)) {
                    start_dispense_cost = "0";
                }
                if (end_purchase_cost == "" || end_purchase_cost.length() <= 0 || end_purchase_cost == null || end_purchase_cost.equalsIgnoreCase(nullvaluecontent)) {
                    end_purchase_cost = "0";
                }
                if (end_dispense_cost == "" || end_dispense_cost.length() <= 0 || end_dispense_cost == null || end_dispense_cost.equalsIgnoreCase(nullvaluecontent)) {
                    end_dispense_cost = "0";
                }
                
                if (endinginventory == "" || endinginventory.length() <= 0 || endinginventory == null || endinginventory.equalsIgnoreCase(nullvaluecontent)) {
                    endinginventory = "0";
                }
                beginninginventory = Double.parseDouble(endinginventory) - Double.parseDouble(start_purchase_cost) + Double.parseDouble(start_dispense_cost);
//                System.out.println("beginninginventory"+beginninginventory);
                endinginventoryvalue = Double.parseDouble(endinginventory) - Double.parseDouble(end_purchase_cost) + Double.parseDouble(end_dispense_cost);
//          System.out.println("endinginventory"+endinginventory);
                //cogs = Double.parseDouble(df.format(cogs)) + (Double.parseDouble(chargeqty) / Double.parseDouble(dispensefactor)) * Double.parseDouble(weighted_avg);
//          System.out.println("cogs"+cogs);
            
             averagecost = Double.parseDouble(df.format((beginninginventory + endinginventoryvalue) / 2));
//            System.out.println("cogs"+cogs);
//            System.out.println("averagecost"+averagecost);
             invetory_turnovervalue = Double.parseDouble(df.format(Double.parseDouble(month_dispense_cost) / averagecost));
             
              
                }
//                System.out.println("monthsdata"+monthsdata[i]);
//                System.out.println("invetory_turnovervalue"+df.format(invetory_turnovervalue));
            invetoryvalues += monthsdata[i] + "@" + df.format(invetory_turnovervalue)+"^";
            
            }
||||||| .r321
            trendgraphlist = session.createSQLQuery("SELECT SUM(total_charge_amount),date(service_date) FROM pharma_cdm_dispenseqty WHERE date(service_date) BETWEEN '"+startdate+"' AND '"+enddate+"' AND update_status=1 GROUP BY service_date").list();
=======
            String ahfsdescarray[] = ahfsvalue.split(",");
            if (ahfsvalue != "" && label_genericname == "") {
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    
                    trendgraphlist = session.createSQLQuery("SELECT pharam_purchaseorder.cin,if(ISNULL(ack_statusdis.ack_status_descriptions),'--',ack_statusdis.ack_status_descriptions),date(pharam_purchaseorder.order_date),if(ISNULL(pharma_inv.order_qty),0,pharma_inv.order_qty),if(ISNULL(pharma_inv.ship_qty),0,pharma_inv.ship_qty),if(ISNULL(pharma_inv.invoice_amount),0,pharma_inv.invoice_amount),if(ISNULL(price_mas.corporate_description),'--',price_mas.corporate_description),if(ISNULL(pharma_inv.return_qty),0,pharma_inv.return_qty),pharam_purchaseorder.ack_status,if(ISNULL(ack_statusdis.ack_status_descriptions) ,0,1) AS pending_ack,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number) as pending_invoice,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number AND pharam_purchaseorder.ack_status!='') as fully_execute FROM   pharma_purchase_order_details as pharam_purchaseorder LEFT JOIN ndc_define as ndcval ON pharam_purchaseorder.NDC=ndcval.ndc  LEFT JOIN pharma_invoice_history as pharma_inv ON pharma_inv.cin=pharam_purchaseorder.cin AND pharma_inv.po_number=pharam_purchaseorder.po_number LEFT JOIN ack_status_define AS ack_statusdis ON ack_statusdis.ack_statuscode=pharam_purchaseorder.ack_status LEFT JOIN pharma_price_master as price_mas ON price_mas.ndc=ndcval.ndc AND price_mas.ahfs_number_level3='" + ahfsdescarray[i] + "' LEFT JOIN contractpriority as contract_prior ON contract_prior.contract_name=price_mas.contract_group_name AND contract_prior.contract_priority IN (" + contract_priority + ") where pharam_purchaseorder.ack_status IN (" + acknowledgemtnstatus + ") AND date(pharam_purchaseorder.ack_date) BETWEEN '" + startdate + "' AND '" + enddate + "'").list();
                    utilizationTrendList.add(trendgraphlist);
                }
            } else if (ahfsvalue == "" && label_genericname != "") {
                
                trendgraphlist = session.createSQLQuery("SELECT pharam_purchaseorder.cin,if(ISNULL(ack_statusdis.ack_status_descriptions),'--',ack_statusdis.ack_status_descriptions),date(pharam_purchaseorder.order_date),if(ISNULL(pharma_inv.order_qty),0,pharma_inv.order_qty),if(ISNULL(pharma_inv.ship_qty),0,pharma_inv.ship_qty),if(ISNULL(pharma_inv.invoice_amount),0,pharma_inv.invoice_amount),if(ISNULL(price_mas.corporate_description),'--',price_mas.corporate_description),if(ISNULL(pharma_inv.return_qty),0,pharma_inv.return_qty),pharam_purchaseorder.ack_status,if(ISNULL(ack_statusdis.ack_status_descriptions) ,0,1) AS pending_ack,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number) as pending_invoice,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number AND pharam_purchaseorder.ack_status!='') as fully_execute FROM   pharma_purchase_order_details as pharam_purchaseorder LEFT JOIN ndc_define as ndcval ON ndcval.generic_name LIKE '%" + label_genericname + "%'  AND pharam_purchaseorder.NDC=ndcval.ndc   LEFT JOIN pharma_invoice_history as pharma_inv ON pharma_inv.cin=pharam_purchaseorder.cin AND pharma_inv.po_number=pharam_purchaseorder.po_number LEFT JOIN ack_status_define AS ack_statusdis ON ack_statusdis.ack_statuscode=pharam_purchaseorder.ack_status LEFT JOIN pharma_price_master as price_mas ON price_mas.ndc=ndcval.ndc LEFT JOIN contractpriority as contract_prior ON contract_prior.contract_name=price_mas.contract_group_name AND contract_prior.contract_priority IN (" + contract_priority + ") where pharam_purchaseorder.ack_status IN (" + acknowledgemtnstatus + ") AND date(pharam_purchaseorder.ack_date) BETWEEN '" + startdate + "' AND '" + enddate + "'").list();
                utilizationTrendList.add(trendgraphlist);
                
            } else if (ahfsvalue != "" && label_genericname != "") {
                
                for (int i = 0; i < ahfsdescarray.length; i++) {
                    
                    trendgraphlist = session.createSQLQuery("SELECT pharam_purchaseorder.cin,if(ISNULL(ack_statusdis.ack_status_descriptions),'--',ack_statusdis.ack_status_descriptions),date(pharam_purchaseorder.order_date),if(ISNULL(pharma_inv.order_qty),0,pharma_inv.order_qty),if(ISNULL(pharma_inv.ship_qty),0,pharma_inv.ship_qty),if(ISNULL(pharma_inv.invoice_amount),0,pharma_inv.invoice_amount),if(ISNULL(price_mas.corporate_description),'--',price_mas.corporate_description),if(ISNULL(pharma_inv.return_qty),0,pharma_inv.return_qty),pharam_purchaseorder.ack_status,if(ISNULL(ack_statusdis.ack_status_descriptions) ,0,1) AS pending_ack,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number) as pending_invoice,(SELECT count(*) FROM pharma_invoice_history as phv_inv where phv_inv.po_number=pharam_purchaseorder.po_number AND pharam_purchaseorder.ack_status!='') as fully_execute FROM   pharma_purchase_order_details as pharam_purchaseorder LEFT JOIN ndc_define as ndcval ON ndcval.generic_name LIKE '%" + label_genericname + "%'  AND pharam_purchaseorder.NDC=ndcval.ndc   LEFT JOIN pharma_invoice_history as pharma_inv ON pharma_inv.cin=pharam_purchaseorder.cin AND pharma_inv.po_number=pharam_purchaseorder.po_number LEFT JOIN ack_status_define AS ack_statusdis ON ack_statusdis.ack_statuscode=pharam_purchaseorder.ack_status LEFT JOIN pharma_price_master as price_mas ON price_mas.ndc=ndcval.ndc AND price_mas.ahfs_number_level3='" + ahfsdescarray[i] + "' LEFT JOIN contractpriority as contract_prior ON contract_prior.contract_name=price_mas.contract_group_name AND contract_prior.contract_priority IN (" + contract_priority + ") where pharam_purchaseorder.ack_status IN (" + acknowledgemtnstatus + ") AND date(pharam_purchaseorder.ack_date) BETWEEN '" + startdate + "' AND '" + enddate + "'").list();
                    utilizationTrendList.add(trendgraphlist);
                }
                
            }
            //trendgraphlist = session.createSQLQuery("SELECT SUM(total_charge_amount),date(service_date) FROM pharma_cdm_dispenseqty WHERE date(service_date) BETWEEN '"+startdate+"' AND '"+enddate+"' AND update_status=1 GROUP BY service_date").list();
>>>>>>> .r399
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
<<<<<<< .mine
        return invetoryvalues;
||||||| .r321
        return trendgraphlist;
=======
        return utilizationTrendList;
>>>>>>> .r399
    }
<<<<<<< .mine
||||||| .r321

=======
    
    @Override
    public List<DataLoads> getDataloadstatusdata() {
        
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<DataLoads> dataloadlist = null;
        ArrayList al = new ArrayList();
        try {
            dataloadlist = session.createSQLQuery("SELECT date(load_date),program_name,file_name,processed_rows_count,sucess_rows_count,error_rows_count,error_log_list from data_loads where load_date >= now()-interval 3 DAY").list();
            al.add(dataloadlist);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return al;
    }
    
    @Override
    public List searchUploadstatus(String startdate, String enddate) {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<DataLoads> dataloadlist = null;
        ArrayList al = new ArrayList();
        try {
            dataloadlist = session.createSQLQuery("SELECT date(load_date),program_name,file_name,processed_rows_count,sucess_rows_count,error_rows_count,error_log_list from data_loads where date(load_date) between '" + startdate + "' and '" + enddate + "' order by load_date desc").list();
            al.add(dataloadlist);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return al;
    }
    
    @Override
    public ArrayList<List> getPendingOrderstatus() {
        
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<DataLoads> pendingorderlist = null;
        ArrayList al = new ArrayList();
        try {
            pendingorderlist = session.createSQLQuery("select * from ").list();
            al.add(pendingorderlist);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return al;
    }
    
    @Override
    public String getordervolumeVariance() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List<DataLoads> ordervary = null;
        ArrayList al = new ArrayList();
        String result = null;
        try {
            
            ordervary = session.createSQLQuery("SELECT on_contract,not_on_contract FROM contactcompliance").list();
            ListIterator itr = ordervary.listIterator();
            while (itr.hasNext()) {
                Object[] contract = (Object[]) itr.next();
                result = contract[0].toString() + "^" + contract[1].toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return result;
    }
    
    @Override
    public List getoneWeeksubstitutions() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        List substitutionsquerylist = null;
        ArrayList sublist = new ArrayList();
        try {
            substitutionsquerylist = session.createSQLQuery("SELECT purchase_details.order_cin,purchase_details.ack_cin,purchase_details.order_quantity,purchase_details.ack_qty,ackstat.ack_status_descriptions,ppm.corporate_description FROM pharma_purchase_order_details as purchase_details,ack_status_define as ackstat,pharma_price_master as ppm WHERE purchase_details.NDC=ppm.ndc and purchase_details.ack_status=ackstat.ack_statuscode and purchase_details.order_date >=now()-interval 7 DAY").list();
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return substitutionsquerylist;
    }
    
    @Override
    public String getInventoryvalues() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        DecimalFormat df = new DecimalFormat("0.00");
        List querylist = null;
        List querylist1 = null;
        List querylist2 = null;
        String invetoryvalues = "";
        String cdmval = "";
        String dispensefactor = "";
        String inventory_bal = "";
        String weighted_avg = "";
        String convertedqty = "";
        String chargeqty = "";
        String individualending_balance = "";
        double beginninginventory = 0;
        double endinginventory = 0;
        double cogs = 0;
        try {
            querylist = session.createSQLQuery("SELECT cdm,dispense_factor,inventory_balance,weighted_avg_cost,(inventory_balance*weighted_avg_cost) FROM pharma_cdm_inventory_parameters as inv_param").list();
            ListIterator itr = querylist.listIterator();
            while (itr.hasNext()) {
                Object[] contract = (Object[]) itr.next();
                cdmval = contract[0] + "";
                dispensefactor = contract[1] + "";
                inventory_bal = contract[2] + "";
                weighted_avg = contract[3] + "";
                individualending_balance = contract[4] + "";
                convertedqty = "0";
                querylist1 = session.createSQLQuery("SELECT sum(converted_qty) FROM pharma_invoice_history WHERE cdm='" + cdmval + "' AND date(invoice_date) BETWEEN DATE_FORMAT(now(),'%Y-01-01') AND CURDATE()").list();
                if (!querylist1.isEmpty() && querylist1.size() > 0) {
                    for (Object object : querylist1) {
                        convertedqty = querylist1.get(0) + "";
                    }
                }
                
                chargeqty = "0";
                querylist2 = session.createSQLQuery("SELECT sum(charge_qty) FROM pharma_cdm_dispenseqty WHERE cdm='" + cdmval + "' AND date(activity_date) BETWEEN DATE_FORMAT(now(),'%Y-01-01') AND CURDATE()").list();
                if (!querylist2.isEmpty() && querylist2.size() > 0) {
                    for (Object object : querylist2) {
                        chargeqty = querylist2.get(0) + "";
                    }
                }
                String nullvaluecontent = "null";
                
                if (chargeqty == "" || chargeqty.length() <= 0 || chargeqty == null || chargeqty.equalsIgnoreCase(nullvaluecontent)) {
                    chargeqty = "0";
                }
                if (convertedqty == "" || convertedqty.length() <= 0 || convertedqty == null || convertedqty.equalsIgnoreCase(nullvaluecontent)) {
                    convertedqty = "0";
                }
                if (dispensefactor == "" || dispensefactor.length() <= 0 || dispensefactor == null || dispensefactor.equalsIgnoreCase(nullvaluecontent)) {
                    dispensefactor = "0";
                }
                if (inventory_bal == "" || inventory_bal.length() <= 0 || inventory_bal == null || inventory_bal.equalsIgnoreCase(nullvaluecontent)) {
                    inventory_bal = "0";
                }
                if (weighted_avg == "" || weighted_avg.length() <= 0 || weighted_avg == null || weighted_avg.equalsIgnoreCase(nullvaluecontent)) {
                    weighted_avg = "0";
                }
               beginninginventory = Double.parseDouble(df.format(beginninginventory)) + Double.parseDouble(inventory_bal) - Double.parseDouble(convertedqty) + ((Double.parseDouble(chargeqty) / Double.parseDouble(dispensefactor)) * Double.parseDouble(weighted_avg));
              
                endinginventory = (Double.parseDouble(df.format(endinginventory)) + Double.parseDouble(individualending_balance));
                System.out.println("endinginventory"+endinginventory);
                cogs = Double.parseDouble(df.format(cogs)) + (Double.parseDouble(chargeqty) / Double.parseDouble(dispensefactor)) * Double.parseDouble(weighted_avg);
          
            }
//             System.out.println("beginninginventory"+beginninginventory);
//               System.out.println("endinginventory"+endinginventory);
//               System.out.println("cogs"+cogs);
            double averagecost = Double.parseDouble(df.format((beginninginventory + endinginventory) / 2));

>>>>>>> .r399
            System.out.println("averagecost"+averagecost);
            double invetory_turnovervalue = Double.parseDouble(df.format(cogs / averagecost));
            
            invetoryvalues = endinginventory + "@" + df.format(invetory_turnovervalue);
                        System.out.println("invetoryvalues"+invetoryvalues);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return invetoryvalues;
    }
    
    
    @Override
    public List getYTDinventoryturnoverratio() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        DecimalFormat df = new DecimalFormat("0.00");
        List querylist = null;
        List querylist1 = null;
        List querylist2 = null;
        String invetoryvalues = "";
        String cdmval = "";
        String dispensefactor = "";
        String inventory_bal = "";
        String weighted_avg = "";
        String convertedqty = "";
        String chargeqty = "";
        double beginninginventory = 0;
        double endinginventory = 0;
        double cogs = 0;
        double averagecost=0;
        double invetory_turnovervalue=0;
        String ahfsdesc = "";
        ArrayList<YTDtrunoverratiomodel> ytdarraylist = new ArrayList<YTDtrunoverratiomodel>();
        try {
            querylist = session.createSQLQuery("SELECT cdm,dispense_factor,inventory_balance,weighted_avg_cost FROM pharma_cdm_inventory_parameters as inv_param").list();
            ListIterator itr = querylist.listIterator();
            while (itr.hasNext()) {
                beginninginventory=0;
                endinginventory=0;
                cogs=0;
                averagecost=0;
                invetory_turnovervalue=0;
                Object[] contract = (Object[]) itr.next();
                cdmval = contract[0] + "";
                dispensefactor = contract[1] + "";
                inventory_bal = contract[2] + "";
                weighted_avg = contract[3] + "";
                convertedqty = "0";
                ahfsdesc="--";
                querylist1 = session.createSQLQuery("SELECT sum(inv_his.converted_qty),COALESCE(ahfs_level3.ahfs_description_level3,'--')  FROM pharma_invoice_history as inv_his LEFT JOIN pharma_price_master as pharama_price ON  pharama_price.corporate_item_number=inv_his.cin  LEFT JOIN ahfs_classification_level3 as ahfs_level3 ON ahfs_level3.ahfs_number_level3=pharama_price.ahfs_number_level3 WHERE inv_his.cdm='"+cdmval+"' AND date(inv_his.invoice_date) BETWEEN DATE_FORMAT(now(),'%Y-01-01') AND CURDATE()").list();
                if (!querylist1.isEmpty() && querylist1.size() > 0) {
                    for (Iterator it = querylist1.iterator(); it.hasNext();) {
                        Object[] getahfsc = (Object[]) it.next();
                        convertedqty = getahfsc[0] + "";
                        ahfsdesc = getahfsc[1] + "";
                    }
                    
                }
                
                chargeqty = "0";
                querylist2 = session.createSQLQuery("SELECT sum(charge_qty) FROM pharma_cdm_dispenseqty WHERE cdm='" + cdmval + "' AND date(activity_date) BETWEEN DATE_FORMAT(now(),'%Y-01-01') AND CURDATE()").list();
                if (!querylist2.isEmpty() && querylist2.size() > 0) {
                    for (Object object : querylist2) {
                        chargeqty = querylist2.get(0) + "";
                    }
                }
                String nullvaluecontent = "null";
                
                if (chargeqty == "" || chargeqty.length() <= 0 || chargeqty == null || chargeqty.equalsIgnoreCase(nullvaluecontent)) {
                    chargeqty = "0";
                }
                if (convertedqty == "" || convertedqty.length() <= 0 || convertedqty == null || convertedqty.equalsIgnoreCase(nullvaluecontent)) {
                    convertedqty = "0";
                }
                if (dispensefactor == "" || dispensefactor.length() <= 0 || dispensefactor == null || dispensefactor.equalsIgnoreCase(nullvaluecontent)) {
                    dispensefactor = "0";
                }
                if (inventory_bal == "" || inventory_bal.length() <= 0 || inventory_bal == null || inventory_bal.equalsIgnoreCase(nullvaluecontent)) {
                    inventory_bal = "0";
                }
                if (weighted_avg == "" || weighted_avg.length() <= 0 || weighted_avg == null || weighted_avg.equalsIgnoreCase(nullvaluecontent)) {
                    weighted_avg = "0";
                }
//                System.out.println("convertedqty"+convertedqty);
//                System.out.println("inventory_bal"+inventory_bal);
//                System.out.println("chargeqty"+chargeqty);
//                System.out.println("dispensefactor"+dispensefactor);
//                System.out.println("weighted_avg"+weighted_avg);
                beginninginventory = Double.parseDouble(inventory_bal) - Double.parseDouble(convertedqty) + ((Double.parseDouble(chargeqty) / Double.parseDouble(dispensefactor)) * Double.parseDouble(weighted_avg));
//                 System.out.println("beginninginventory"+beginninginventory);
                endinginventory = Double.parseDouble(df.format(Double.parseDouble(inventory_bal) * Double.parseDouble(weighted_avg)));
//                System.out.println("endinginventory"+endinginventory);
                if(Double.parseDouble(dispensefactor)>0){
                cogs = Double.parseDouble(df.format((Double.parseDouble(chargeqty) / Double.parseDouble(dispensefactor)) * Double.parseDouble(weighted_avg)));
                }else{
                  cogs=0;  
                }
//                System.out.println("cogs"+cogs);
                 averagecost = Double.parseDouble(df.format((beginninginventory + endinginventory) / 2));
//                 System.out.println("averagecost"+averagecost);
                if(averagecost>0){
                 invetory_turnovervalue = Double.parseDouble(df.format(cogs / averagecost));
                }else{
                    invetory_turnovervalue = 0;
                }
//System.out.println("invratio"+invetory_turnovervalue);
                if (invetory_turnovervalue > 0) {
                    String invratio=df.format(invetory_turnovervalue);
//                    System.out.println("invratio"+invratio);
                    
                    ytdarraylist.add(new YTDtrunoverratiomodel(ahfsdesc, Double.parseDouble(invratio)));
                    
                   
                }
                
                
            }
          
 Collections.sort(ytdarraylist,YTDtrunoverratiomodel.ahfscompare);

        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return ytdarraylist;
    }
    
    @Override
    public List getTopfiveinventoryvalue() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        DecimalFormat df = new DecimalFormat("0.00");
        List querylist = null;
        List querylist1 = null;
       
        String cdmval = "";
       
        String inventory_bal = "";
        String weighted_avg = "";        
        double endinginventory = 0;
      
        String ahfsdesc = "";
        ArrayList<YTDtrunoverratiomodel> ytdarraylist = new ArrayList<YTDtrunoverratiomodel>();
        try {
            querylist = session.createSQLQuery("SELECT cdm,inventory_balance,weighted_avg_cost FROM pharma_cdm_inventory_parameters as inv_param").list();
            ListIterator itr = querylist.listIterator();
            while (itr.hasNext()) {
                
                endinginventory=0;
               
                Object[] contract = (Object[]) itr.next();
                cdmval = contract[0] + "";
               
                inventory_bal = contract[1] + "";
                weighted_avg = contract[2] + "";
               
                querylist1 = session.createSQLQuery("SELECT DISTINCT ndcval.generic_name FROM pharma_invoice_history as inv_his ,ndc_define as ndcval WHERE  ndcval.cdm=inv_his.cdm AND inv_his.cdm='" + cdmval + "' AND date(inv_his.invoice_date) BETWEEN DATE_FORMAT(now(),'%Y-01-01') AND CURDATE()").list();
                if (!querylist1.isEmpty() && querylist1.size() > 0) {
                     for (Object object : querylist1) {
                        ahfsdesc = querylist1.get(0) + "";
                    }
                    
                }
                
              
                String nullvaluecontent = "null";
               
                if (inventory_bal == "" || inventory_bal.length() <= 0 || inventory_bal == null || inventory_bal.equalsIgnoreCase(nullvaluecontent)) {
                    inventory_bal = "0";
                }
                if (weighted_avg == "" || weighted_avg.length() <= 0 || weighted_avg == null || weighted_avg.equalsIgnoreCase(nullvaluecontent)) {
                    weighted_avg = "0";
                }
              endinginventory = Double.parseDouble(df.format(Double.parseDouble(inventory_bal) * Double.parseDouble(weighted_avg)));
                
               
                if (endinginventory > 0) {
                    String inventoryvalue=df.format(endinginventory);
                    ytdarraylist.add(new YTDtrunoverratiomodel(ahfsdesc, Double.parseDouble(inventoryvalue)));
                    
                }
                
                
            }
            Collections.sort(ytdarraylist, YTDtrunoverratiomodel.ahfscompare);
                 
            System.out.println("ytdarraylist"+ytdarraylist.size());

//                   
            
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return ytdarraylist;
    }
    
    @Override
    public String getMonthlyinventoryturnoverratio() {
        @SuppressWarnings("unchecked")
        Session session = sessionfactory.openSession();
        DecimalFormat df = new DecimalFormat("0.00");
        List querylist = null;
        List querylist1 = null;
        List querylist2 = null;
        String invetoryvalues = "";
        String cdmval = "";
        String dispensefactor = "";
        String inventory_bal = "";
        String weighted_avg = "";
        String convertedqty = "";
        String endingconvertedqty="";
        String endingchargeqty="";
        String chargeqty = "";
        double beginninginventory = 0;
        double endinginventory = 0;
        double cogs = 0;
        double averagecost =0;
        double invetory_turnovervalue =0;
        
        String ahfsdesc = "";
        ArrayList<YTDtrunoverratiomodel> ytdarraylist = new ArrayList<YTDtrunoverratiomodel>();
        String[] monthsdata  ={"Jan"};
//        String[] monthsdata  ={"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
        String startdatedata="";
        String enddatedata="";
        try {
            Calendar c= Calendar.getInstance();
int year = c.get(Calendar.YEAR);//calender year starts from 1900 so you must add 1900 to the value recevie.i.e., 1990+112 = 2012
int month = c.get(Calendar.MONTH);//this is april so you will receive  3 instead of 4.

            for(int i=0;i<monthsdata.length;i++){
                beginninginventory = 0;
                endinginventory = 0;
                cogs = 0;
                averagecost =0;
                invetory_turnovervalue =0;
                if((i+1)<=month){
                
                if(monthsdata[i]=="Jan"){
                    startdatedata=year+"-01-01";
                    enddatedata=year+"-01-31";
                }else if(monthsdata[i]=="Feb"){
                    startdatedata=year+"-02-01";
                    enddatedata=year+"-03-01";
                }else  if(monthsdata[i]=="Mar"){
                    startdatedata=year+"-03-01";
                    enddatedata=year+"-04-01";
                }else  if(monthsdata[i]=="Apr"){
                    startdatedata=year+"-04-01";
                    enddatedata=year+"-05-01";
                }else if(monthsdata[i]=="Mar"){
                    startdatedata=year+"-05-01";
                    enddatedata=year+"-06-01";
                }else if(monthsdata[i]=="Jun"){
                    startdatedata=year+"-06-01";
                    enddatedata=year+"-07-01";
                }else if(monthsdata[i]=="Jul"){
                    startdatedata=year+"-07-01";
                    enddatedata=year+"-08-01";
                }else if(monthsdata[i]=="Aug"){
                    startdatedata=year+"-08-01";
                    enddatedata=year+"-09-01";
                }else if(monthsdata[i]=="Sep"){
                    startdatedata=year+"-09-01";
                    enddatedata=year+"-10-01";
                }else if(monthsdata[i]=="Oct"){
                    startdatedata=year+"-10-01";
                    enddatedata=year+"-11-01";
                }else if(monthsdata[i]=="Nov"){
                    startdatedata=year+"-11-01";
                    enddatedata=year+"-12-01";
                }else if(monthsdata[i]=="Dec"){
                    startdatedata=year+"-12-01";
                    enddatedata=year+"-12-31";
                }
            querylist = session.createSQLQuery("SELECT cdm,dispense_factor,inventory_balance,weighted_avg_cost FROM pharma_cdm_inventory_parameters as inv_param ").list();
            ListIterator itr = querylist.listIterator();
            
            while (itr.hasNext()) {
                Object[] contract = (Object[]) itr.next();
                cdmval = contract[0] + "";
                dispensefactor = contract[1] + "";
                inventory_bal = contract[2] + "";
                weighted_avg = contract[3] + "";
                convertedqty = "0";
                querylist1 = session.createSQLQuery("SELECT sum(converted_qty) FROM pharma_invoice_history WHERE cdm='" + cdmval + "' AND date(invoice_date) BETWEEN '"+startdatedata+"' AND CURDATE()").list();
                if (!querylist1.isEmpty() && querylist1.size() > 0) {
                    for (Object object : querylist1) {
                        convertedqty = querylist1.get(0) + "";
                    }
                }
                
                chargeqty = "0";
                querylist2 = session.createSQLQuery("SELECT sum(charge_qty) FROM pharma_cdm_dispenseqty WHERE cdm='" + cdmval + "' AND date(activity_date) BETWEEN '"+startdatedata+"' AND CURDATE()").list();
                if (!querylist2.isEmpty() && querylist2.size() > 0) {
                    for (Object object : querylist2) {
                        chargeqty = querylist2.get(0) + "";
                    }
                }
                
                /** Ending inventory value **/
                endingconvertedqty = "0";
                querylist1 = session.createSQLQuery("SELECT sum(converted_qty) FROM pharma_invoice_history WHERE cdm='" + cdmval + "' AND date(invoice_date) BETWEEN '"+enddatedata+"' AND CURDATE()").list();
                if (!querylist1.isEmpty() && querylist1.size() > 0) {
                    for (Object object : querylist1) {
                        endingconvertedqty = querylist1.get(0) + "";
                    }
                }
                
                endingchargeqty = "0";
                querylist2 = session.createSQLQuery("SELECT sum(charge_qty) FROM pharma_cdm_dispenseqty WHERE cdm='" + cdmval + "' AND date(activity_date) BETWEEN '"+enddatedata+"' AND CURDATE()").list();
                if (!querylist2.isEmpty() && querylist2.size() > 0) {
                    for (Object object : querylist2) {
                        endingchargeqty = querylist2.get(0) + "";
                    }
                }
                String nullvaluecontent = "null";
                
                if (endingconvertedqty == "" || endingconvertedqty.length() <= 0 || endingconvertedqty == null || endingconvertedqty.equalsIgnoreCase(nullvaluecontent)) {
                    endingconvertedqty = "0";
                }
                if (endingchargeqty == "" || endingchargeqty.length() <= 0 || endingchargeqty == null || endingchargeqty.equalsIgnoreCase(nullvaluecontent)) {
                    endingchargeqty = "0";
                }
                if (chargeqty == "" || chargeqty.length() <= 0 || chargeqty == null || chargeqty.equalsIgnoreCase(nullvaluecontent)) {
                    chargeqty = "0";
                }
                if (convertedqty == "" || convertedqty.length() <= 0 || convertedqty == null || convertedqty.equalsIgnoreCase(nullvaluecontent)) {
                    convertedqty = "0";
                }
                if (dispensefactor == "" || dispensefactor.length() <= 0 || dispensefactor == null || dispensefactor.equalsIgnoreCase(nullvaluecontent)) {
                    dispensefactor = "0";
                }
                if (inventory_bal == "" || inventory_bal.length() <= 0 || inventory_bal == null || inventory_bal.equalsIgnoreCase(nullvaluecontent)) {
                    inventory_bal = "0";
                }
                if (weighted_avg == "" || weighted_avg.length() <= 0 || weighted_avg == null || weighted_avg.equalsIgnoreCase(nullvaluecontent)) {
                    weighted_avg = "0";
                }
                beginninginventory = Double.parseDouble(df.format(beginninginventory)) + Double.parseDouble(inventory_bal) - Double.parseDouble(convertedqty) + ((Double.parseDouble(chargeqty) / Double.parseDouble(dispensefactor)) * Double.parseDouble(weighted_avg));
//                System.out.println("beginninginventory"+beginninginventory);
                endinginventory = Double.parseDouble(df.format(endinginventory)) + Double.parseDouble(inventory_bal) - Double.parseDouble(endingconvertedqty) + ((Double.parseDouble(endingchargeqty) / Double.parseDouble(dispensefactor)) * Double.parseDouble(weighted_avg));
//          System.out.println("endinginventory"+endinginventory);
                cogs = Double.parseDouble(df.format(cogs)) + (Double.parseDouble(chargeqty) / Double.parseDouble(dispensefactor)) * Double.parseDouble(weighted_avg);
//          System.out.println("cogs"+cogs);
            }
             averagecost = Double.parseDouble(df.format((beginninginventory + endinginventory) / 2));
//            System.out.println("cogs"+cogs);
//            System.out.println("averagecost"+averagecost);
             invetory_turnovervalue = Double.parseDouble(df.format(cogs / averagecost));
             
              
                }
//                System.out.println("monthsdata"+monthsdata[i]);
//                System.out.println("invetory_turnovervalue"+df.format(invetory_turnovervalue));
            invetoryvalues += monthsdata[i] + "@" + df.format(invetory_turnovervalue)+"^";
            
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("Exception in dataloadlist method " + e);
        } finally {
            session.close();
        }
        return invetoryvalues;
    }
}
